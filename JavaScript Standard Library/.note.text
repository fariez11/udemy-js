______
NUMBER
     - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
     - https://lansweeper.com/knowledgebase/list-of-currency-culture-codes/

______ 
STRING
     - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

_____
ARRAY
    > Array Queue
        - dalam struktur data, terdapat tipe struktur data bernama queue (antrian)
        - dimana data masuk akan diposisikan di urutan paling belakang
        - sedangkan data keluar akan diposisikan dari urutan paling depan (use shift())
        - istilahnya FIFO (First In First Out)
    
    > Array Stack
        - kebalikan dari queue
        - sifatnya LIFO (Last In First Out)
        - untuk menambah diurutan paling belakang bisa menggunakan push()
        - untuk menghapus paling belakang bisa menggunakan pop()

______ 
OBJECT
    > Object Freeze & Seal
        - secara default, object bisa diubah2 atau dihapus
        - agar object jadi tidak bisa diubah atau dihapus, maka bisa memakai static method
        - Object.freeze() mengubah object agar object jadi tidak bisa diubah atau dihapus attributnya
        - Object.seal() mengubah object agar object jadi tidak bisa dihapus attributnya

    > Object Assign
        - untuk menggabungkan semua attribut dari sebuah object ke object lain
    
    > Object Property Name & Value
        - object juga memiliki static method untuk mengambil semua properties names dan Value
        - Object.values() untuk mengambil semua property value
        - Object.getOwnPropertyName() untuk mengambil semua property name

____ 
JSON
     - json singkatan dari JS Object Notation
     - https://www.json.org/json-en.html

______ 
BIGINT
     - merupakan data number yang bisa mencakup data angka lebih dari Number.MAX_SAFE_INTEGER
     - cara penggunaan bigint sama aja dengan penggunaan Number (dan penggunaan operatornya)
     - ciri-ciri : diujung angka dikasih huruf n ex: 123n

____
DATE 

    > Epoch & Unix Timestamp
        - merupakan hitungan milisecond setelah tgl 1 Januari 1970
        
    > Parsing Date
        - parsing date ke string
        - format harus YYYY-MM-DDTHH:mm:ss.sssZ

    > Getter & Setter
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#instance_methods

____
MATH
     - hanya bisa digunakan untuk tipe data Number, tidak bisa digunakan untuk tipe data bigint
     - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math 

_______ 
BOOLEAN
     - memiliki method toString() untuk menkonversi ke String
     - dan memiliki method valueOf() untuk menkonversi ke tipe boolean primitif
     - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean 

___ 
MAP 
     - merupakan representasi dari struktur data key-value
     - Map mirip dengan tipe data object, hanya saja semua method untuk manipulasi data sudah disediakan
     - Map mengikuti kontrak iterable, sehingga bisa diiterasi secara default
    
    > Perbedaan             
                            Map                           &                            Object
        - Pertama dibuat, tidak memiliki key              X   karena memiliki prototype, jadi bisa memiliki default key ketika dibuat
        - bisa data apapun                                X   hanya bisa menggunakan string atau symbol
        - bisa tahu jumlah key (w/ attribut key)          X   tidak bisa diketahui, harus manual menggunakan iterasi
        - secara default tidak bisa dikonversi ke JSON    X   bisa dikonversi ke JSON otomatis

___ 
SET 
     - merupakan implementasi dari struktur data yang berisikan data-data unique
     - set mirip seperti array, hanya saja isi datanya selalu unique
     - jik kita menambahkan data yang sama, maka data hanya akan diterima satu saja
     - set mengimplementasikan kontrak iterable, sehingga bisa diiterasi secara defaut

______ 
SYMBOL
     - Symbol merupakan type data yang digaransi akan selalu unique setiap kali kita membuat data symbol
     - Symbol kadang banyak digunakan untuk membuat key pada object
    
    > Symbol Fo
        - kadang agak sulit membuat symbol harus selalu menggunakan variable
        - pembuatan symbol juga bisa menggunakan static method Symbol.for(key)
        - Jika keynya sama, symbol yang sama akan selalu dikembalikan

______________
REGEXP / REGEX
     - merupakan implementasi dari regular expression di JS
     - merupakan fitur untuk mencari text dengan pola
     - membuat RegExp di JS bisa dilakukan dengan dua cara yaitu : literal notation / membuat object RegExp
     - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
    
    > RegExp Instance Method (eksekusi regex)
        - exec(val) :result  ~> jika menemukan data sesuai pola, maka dikembalikan resultnya
                                jika tidak null
        - test(val) :boolean ~> jika menemukan data sesuai pola, maka return true, jika tidak false
    
    > RegExp Modifier
        ~> i : regex menjadi incase sensitive
        ~> g : pencarian dilakukan secara global, secara default setelah menemukan data, pencarian akan berhenti
        ~> m : multiline, pencarian dilakukan di tiap baris (enter)
    
    > fitur RegExp Lainnya
        - Assersions : indikasi awal dan akhir teks
            https://developer.mozilla.org/en-US/search?q=Assertions
        - Character Classes : membedakan antara huruf dan angka 
            https://developer.mozilla.org/en-US/search?q=CharacterClasess
        - Groups dan Range : melakukan grouping atau range huruf atau angka 
            https://developer.mozilla.org/en-US/search?q=Groups_and_Ranges
        - Quantifiers : menentukan jumlah huruf atau angka
            https://developer.mozilla.org/en-US/search?q=Quantifiers

    > Regular Expression di String 
        - match(regex) : Array
        - search(regex) : index
        - replace(regex,value)
        - replaceAll(regex,value)
        - split(regex) : Array

_____ 
PROXY
     - merupakan fitur yang bisa digunakan wakil sebuah data
     - dengan menggunakan proxy, semua interaksi ke data akan selalu melalui proxy terlebih dahulu
     - dengan ini kita bisa melakukan apapun sebelum interaksi dilakukan ke data yang dituju
     https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Proxy
    
    > Proxy Handler
        - pembuatan proxy perlu meggunakan handler, dimana dalam handler, kita bisa membuat function 
          yang dinamakan interceptor (function yang selalu dipanggil ketika datanya di akses) yang digunakan
          ketika mengambil data atau mengubah data ke target 
        
    > Proxy dan Handler
        - saat mengubah data proxy, secara otomatis data akan dikirim ke target melalui handler dengan
          memanggil function set(targetm property, value)
        - saat mengambil data proxy, secara otomatis data akan diambil dari target melalui handler dengan
          memanggil function get(target, property)
        - jika kita ingin melakukan sesuatu sebelum dan setelahnya, bisa kita lakukan di handler

_______ 
REFLECT
     - merupakan class yang digunakan untuk mengeksekusi JS function
     - reflect tidak memiliki constructor, dan cara penggunaan reflect tidak dengan membuat object dengan new Reflect (utility)
     - penggunaan reflect adalah menggunakan banyak sekali static methodnya 
     https://developer.mozilla.org/en-US/Web/JavaScript/Reference/Global_Objects/Reflect


______ 
ENCODE
     - saat menulis URL, kadang kita ingin menambahkan informasi tambahan seperti query param misalnya
     - URL sendiri sudah memiliki standard encoding penulisan URL
     - standard encoding ini dilakukan agar penulisan URL aman ketika diterima oleh server
     - Aman disini dalam artian informasi URL tidak berubah
     - contoh paling sederhan, walaupun kita bisa mengirim spasi dalam url, tapi disarankan untuk di encode
       agar nilai spasi tidak benar-benar terlihat seperti spasi pada URL nya.
    
    > Contoh Masalah Tidak Menggunakan Encode 
        - misal ada query parameter dengan nama data, lalu kita ingin mengirimkan nilai kesana
        - misal nilainya adalah &eko=eko&, alhasil URL nya akan seperti berikut
        - http://contoh.com?data=&eko=eko&
        - URL diatas terlihat tidak ada masalah , tapi sebenarnya ketika diterima oleh server, parameter data
          bernilai kosong, kenapa? karena '&' dianggap sebagai pemisah antar parameter
        - atinya tanda seperti & dan lain lain perlu di encode, agar tidak terjadi kesalahan data yang kita kirim

    > Encode function
        - encodURI(val)              : melakukan encode value,namun karakter yang dipesan di URI tidak akan diubah (;,/?:@&=+$#)
        - encodeURIComponent(val)    : melakukan encode value semua karakter
        - decodeURI(encode)          : melakukan decode value hasil encodeURI()
        - decodeURIComponent(encode) : melakukan decode value hasil encodeURIComponent()

______ 
BASE64
     - merupakan binary to text encoding, representasi binary data dalam format string
     - merupakan format text data yang aman untuk dikirimkan di Web
     - merupakan encoding yang biasanya digunakan ketika perlu mengirim data dari client ke server
     - karena encoding Base64 merupakan text, oleh karena itu sangat aman digunakan pada query param URL atau text body dalam form 
     https://developer.mozilla.org/en-US/docs/Glossary/Base64
     - perlu diingat bahwa Base64 itu untuk encode dan decode bukan enkripsi

    > Base64 Function
        - btoa(val)     : encode ke base64 dari value
        - atob(encode)  : decode dari base64 ke value

____
EVAL (tidak disarankan untuk menggunakan ini)
     - Eval merupakan function yang digunakan untuk mengeksekusi kode JS dari String
     - Fitur ini sangat menarik, namun perlu hati hati untuk menggunakannya
     - Jika sampai salah penggunaan, maka bisa jadi kita malah mengeksekusi kde program yang bisa
       menyebabkan masalah keamanan website kita
     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval

