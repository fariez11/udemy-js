___________ 
Live Server
    - saat kita menggunakan fitur JS Module, sangat disarankan untuk menjalankan kode JS kita dalam Web Server
    - hal ini karena spesifikasi dari javascript module meminta secara default kode JS perlu di satu domain
       server, jika kita membuat file html menggunakan URL file://, maka dikhawatirkan akan terjadi error CORS
       (Cross Origin Resource Sharing)

____________ 
Tanpa Module
  > Dengan Module
      - namun jika kita menggunakan module, kita bisa secara efektif memilih bagian kode mana yang ingin kita
        expor keluar
      - secara default, kode yang kita buat menggunakan JS Module tidak bisa digunakan dari luar file, kecuali
        kita memintanya untuk mengekspor keluar

______________ 
Membuat Module
    - membuat module, sangat sederhana, kita cukup membuat file JS saja
    - yang membedakan adalah, saat kita akan menload file JS dari HTML, kita tidak menggunakan type js lagi,
      melainkan menggunakan type module
  
  > File .js dan .mjs
      - karena file JS Module sama sebenarnya dengan JS, kadang developer membedakan nama file untuk JS Module
        menggunakan mjs
      - hal ini sebenarnya tidak ada kewajiban, hanya saja agar mempermudah ketika tahapan dev, kita bisa dengan 
        mudah membedakan mana file JS biasa, mana file JS Module hanya dengan extensio filenya saja
    
    - secara default, saat kita menggunakan fitur JS Module, semua code (function, variable, class dan lain lain)
      tidak akan di ekspor keluar module tersebut
    - jika kita ingin mengekspos kode tsb, kita harus memberitahunya secara explisit
  
_______
Eksport
    - export bisa ditambahkan diawal sebuah variable,function & class

______ 
Import
    - export digunakan untuk mengekspos kode di module, jika kita ingin menggunakan kode yang sudah di ekspos
      di module, kita bisa menggunakan kata kunci import
    - cara menggunakan kata kunci import adalah sebagai berikut:
      import {namaFunction, namaVarible, NamaClass} from "lokasi-module.js"
    - module hanya bisa digunakan di module lain, jadi dipastikan ketika membuat script, kita harus menggunakan
      type module
    - saat menggunakan import, kita tidak perlu lagi menambahkan script module src satu persatu, karena sudah
      dihandle oleh browser secara otomatis ketika menggunakan module

________ 
Variable

_____ 
Class 
    - secara default, class tsb hanya bisa diakses dari dalam module nya saja, tidak bisa diluar module
    - jika kita ingin mengekspos class yang kita buat, kita juga bisa menggunakan kata kunci export

_______________ 
Export Multiple
    - saat kita membuat aplikasi JS, semakin lama kemungkinan module akan semakin banyak, bisa saja 
      akan ada nama variable, nama function, nama class yang sama antar module
    - hal ini akan menyulitkan ketika ada module yang menggunakan beberapa module, namun ternyata variable,
      function atau class nya memiliki nama yang sama
    - module memiliki fitur alias, dimana kita bisa mengubah nama variable, function atau class nya
  
  > Alias di Export
    - tidak disarankan menggunakan alias pada export
  > Alias di Import

______________ 
Export Default
    - kita selalu melakukan export dengan nama, baik itu nama variable, function dan yang lainnya
    - ada juga fitur export default, ini adalah fitur yang digunakan untuk mempermudah untuk membuat default
      data di module, dan membantu javascript agar kompatibel dengan commonJS dan AMD module system
    - dalam 1 tidak boleh memilki multiple default 
    
  > Default dan Named Export
    - dalam satu module, kita bisa menggabungkan export dan export named
    - yang tidak boleh adalah, dalam satu module, membuat lebih dari satu default
  
  > Rekomendasi
    - bedakan antara default dan named, karena jika digabungkan kadang akan membingungkan ketika melakukan import
    - sebisa mungkin selalu gunakan export named dibandingkan export default 

_____________ 
Module Object
    - ketika module berisikan banyak sekali export data, maka melakukan import satu persatu akan terlihat berantakan
    - rekomendasinya ketika kita ingin mengimport module yang sangat banyak export datanya, gunakan Module Object
    - Module Object sederhananya adalah object JS yang berisi attribute hasil dari export pada module 
    - Cara membuat module object bisa kita lakukan misal seperti ini 
       ex: import * moduleName from "./module.js"

__________________ 
Aggregating Module
    - ada waktunya kadang kita ingin meng aggregate module menjadi satu agar penggunanya lebih sederhana
    - jika module sudah banyak, maka ketika butuh banyak module, kita harus sebutkan nama module tersebut setiap import 
    - dengan melakukan aggregate, kita bisa membuat module aggregate, yang isinya menggabungkan export dari module lain

______________________ 
Dynamic Module Loading
    - saat kita menggunakan module dengan cara import, maka semua module akan di load
    - pada kenyataannya, kadang kita tidak ingin menload semua module diawal, kita ingin menload module ketika 
      dibutuhkan saja, ini akan menghemat bandwith jaringan juga, karena kita tidak perlu download semua module diawal
    - JS mendukung dynamic module loading, caranya kita bisa menggunakan function import(), yang dimana hasilnya
      berupa promise<Module Object>