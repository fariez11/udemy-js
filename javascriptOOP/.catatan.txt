______________
Pengenalan OOP
    > Apa itu class
        - Class berisikan deklarasi semua propertis dan function yang dimiliki oleh Object.
        - Setiap Object selalu dibuat dari class
        - Dan sebuah Class bisa membuat object tanpa batas
    > OOP di js
        - JS sendiri sebenarnya sejak awal dibuat sebagai bahasa prosedural, bukan bahasa OOP
        - oleh karna itu, implemetasi OOP di JS memang tidak sedetail bahasa pemrograman yang 
          lain yang memang dari awal merupakan bahasa pemrograman OOP seperti Java / C++
____________________
Constructor Function
    > Membuat constructor function
        - Sebelum EcmaScript versi 6 , pembuatan class, biasanya menggunakan function. Hal ini dikarenakan 
          sebenarnya JS bukanlah bahasa pemrograman yang fokus ke OOP
        - Untuk membuat classdi javascript lama, kita bisa membuat function
        - Function ini kita sebut dengan Constructor Function 

    > Membuat object dari constructor function
        - setelah kita membuat class, jika kita ingin membuat object dari class tsb, kita bisa menggunakan 
          kata kunci new, lalu diikuti dengan nama constructor func kita
____________________________
Property di Constructor Func
__________________________
Method di Constructor Func
    - jika kita tambahkan method di constructor function, secara otomatis object yang dibuat akan memiliki method tersebut

_____________________________
Parameter di Constructor Func
_______________________
Constructor Inheritance
    - didalam constructor kita bisa memanggil constructor lain, dengan begitu kita bisa mewarisi
      semua property yang dibuat di constructor lain tsb.
    - untuk memanggil constructor lain, kita bisa menggunakan NamaConstructor.call(this, parameter)

_________
Prototype
    - javascript sebelumnya dikenal dengan pemrograman berbasis Prototype

    > Prototype Inheritance
        - Saat kita membuat object dari constructor function, object tsb disebut instance,semua property
          (value / method), akan berada didalam instance objectnya.
        - Setiap kita membuat sebuah constructor function, maka secara otomatis akan dibuatkan prototypenya
          ,misal ketika kita membuat constructor func Person, maka akan ada Person.prototypenya
        - Saat kita membuat sebuah object instance, secara otomatis object tsb adalah turunan dari 
          Constructor.prototype nya
        - Untuk mengakses prototype milih sebuah instance, kita bisa menggunakan _proto_

    > Menambah property ke prototype
        - Property mirip object, dimana kita bisa menambah property baik itu value ataupun method
        - Saat kita menambah property ke Prototype, secara otomatis,semua object instance yang turunan dari prototype tsb
          akan memiliki property tersebut

    > Cara Kerja Protoype Inheritance
        - Bagaimana bisa property diakses dari object instance?
            ~> ketika mengakses property di object instance, pertama akan di cek apakah di object tersebut terdapat property 
               tsb atau tidak, jika tidak, maka akan dicek di _proto_(protoype) nya, jika tidak ada, akan dicek lagi di _proto_ 
               yang lebih tinggi, begitu seterusnya sampai berakhir di Object Prototype.

_____________________
Prototype Inheritance      
    - hal ini juga bisa dilakukan, namun agak sedikit triky, karena hal ini sebenarnya untuk JS Modern, tidak direkomendasikan lagi dipraktek OOP
      menggunakan protoype, karena di ES(EcmaScript) 6 sidan dikenakan kata kunci class yang nanti akan dibahas di chapter sendisi :P

_____
Class
    > Membuat Class
        - Sejak EcmaScript versi 6, diperkenalkan kata kunci baru, yaitu class, ini merupakan kata kunci yang digunakan untuk 
          membuat class di Javascript
        - Dengan kata kunci class, kita tidak perlu lagi menggunakan constructor function untuk membuat class

____________________
Constructor di Class 
    - karena bentuknya constructor function dengan function, jadi kita bisa menambah parameter pada constructor function, 
      lantas bagaimana dengan class?
    - di class juga kita bisa menambah constructor, dimana dengan menggunakan constructor, kita juga bisa menambah 
      parameter saat pertama kali membuat objectnya
    - untuk membuat constructor di class, kita bisa menggunakan kata kunci constructor

_________________
Property di Class
    - sama seperti pada constructor func, dalam class pun kita bisa menambahkan property
    - Karena hasil akhirnya adalah sebuah object, jadi menambahkan proprety di class bisa juga dilakukan di instance objectya.

_______________
Method di Class
    - membuat method di class sebenarnya bisa dilakukan dengan cara seperti menambahkan method di constructor function
    - namun hal tersebut sebenarnya menambahkan method ke dalam instance object
    - khusus untuk method sebaiknya kita menambahkan ke prototype, bukan ke instance object
    - untungnya di class, ada cara mudah untuk menambahkan method dan secara otomatis ditambahkan ke prototype

_________________ 
Class Inheritance
    - sebelumnya kita tahu bahwa prototype mendukung pewarisan, walaupun agak sedikit tricky cara pembuatannya
    - untungnya itu diperbaiki di ES6 dengan fitur classnya 
    - sebuah class bisa melakukan pewarisan dari class lainnya dengan menggunakan kata kunci extends
    - di JS, class inheritance sama seperti prototype inheritance, hanya bisa memiliki parent class

_________________ 
Super Constructor
    - Class inheritance sifatnya seperti Prototype Inheritance
    - Bagaimana dengan Constructor Inheritance ? sebenarnya constructor inheritance hanyalah melakukan eksekusi constructor lain
      dengan tujuan agar property di constructor lain bisa ditambahkan ke instance object ini
    - dalam kasus ini, jika kita ingin mencapai hasil yang sama, kita bisa menggunakan kata kunci super didalam constructor
    - kata kunci super digunakan untuk memanggil constructor super class
    - jika di child class kita membuat constructor, maka kita wajib memanggil parent constructor, walaupun di parent tidak ada constructor

note* : 
    - ketika childnnya ingin membuat constructor maka wajib memanggil constructor yang ada di parent nya juga (walupun diparentnya tidak constructor)
        cara panggil : super(optional)

____________ 
Super Method
    - Selain digunakan untuk memanggil constructor milih parent class, kata kunci super juga bisa digunakan untuk mengakses method parent class.
    - caranya bisa menggunakan super titik nama function nya
    - dengan kata lain, super sebenarnya adalah reference ke parent prototype, mirip seperti _proto_

______________________ 
Getter Setter in Class
    - Class juga mendukung pembuatan getter and Setter
    - perlu diingat, getter dan setter ini berada di prototype, bukan instance object

___________ 
Class Field
    - biasanya, saat kita ingin menambahkan field (property yang berisi value),kita biasanya tambahkan di constructor
    - namun, ada proposal di ES yang mengajukan pembuatan public class field ditempatkan diluar constructor
      selevel dengan penempatan method 
    - proposal ini masih belum final, namun beberapa browser sudah mendukungnya
    - https://github.com/tc39/proposal-class-field

  > Public class Field
  > Private
    - jika kita ingin membuat field yang bersifat private(hanya bisa diakses didalam class), kita bisa menggunakan
      tanda # sebelum nama fieldnya

______________ 
Private Method
    - access modifier juga bisa digunakan di merhod
    - caranya sama, dengan cara menambahkan tanda # diawal method, maka secara otomatis method tsb adalah private

___________________ 
Operator instanceof
    - kadang ada kasus kita ingin mengecek apakah sebuah object merupakan instance dari class tertentu atau bukan
    - kita tidak bisa menggunakan operator typeof, karena object dari class, jika gunakan opearator typeof, hasilnya = "object"
    - operator instanceof akan menghasilkan boolean, true jika benar obejct tersebut adalah instance objectnya, atau false jika bukan

  > Operator instanceof di Class Inheritance
    - operator instanceof mendukung class inheritance, artinya instanceof juga bisa digunakan untuk mengecek,
      apakah sebuah object adalah instance dari class tertentu, atau turunan dari class tertentu 
  
_________________ 
Kata Kunci static
    - static adalah kata kunci yang bisa kita tambahkan sebelum field atau method, biasanya ketika kita membuat
      field atau method, maka secara otomatis field akan menjadi property di instance object, dan method akan menjadi
      function di prototype
    - jika kita tambahkan static, maka hal itu tidak akan terjadi

  > Static Class Field
    - jika kita tambahkan static dalam class field, secara otomatis field tersebut bukan lagi milik instance object,
      melainkan milik class nya itu sendiri
    - biasanya static digunakan jika kita ingin membuat utility field atau function
    - cara mengakses static class field pun tidak lagi lewat object, melainkan lewat classnya
    - Static class field bisa diartikan sifatnya global, tidak peduli diakses dimana atau siapa yang penting, hasilnya sama
  
_____________   
Static method
    - kata kunci static juga tidak hanya bisa ditambahkan difield, tapi juga di method
    - jika kita tambahkan di method, artinya method tersebut jadi milik class nya, bukan prototype
    - dan untuk mengakses method tersebut, kita juga bisa lakukan seperti mengakses static class field

_____ 
Error
    - banyak sekali class error di JS, namun semua class error di JS selalu berujung classError, artinya class Error
      adalah superclass untuk semua jenis error diJS
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError
  
  > Throw Error
    - kita perlu memberitahu program kita, bahwa kita akan mentrigger sebuah error terjadi,atau istilahnya adalah
      melempar error (throw error)
    - untuk melempar error kita bisa menggunakan kata kunci thow, diikuti dengan instance object errornya
    - jika terjadi error maka otomatis kode program kita berhenti, dan kita bisa melihat detal errornya

______________ 
Error Handling 
    - di JS kita bisa menangkap jika terjadi error
    - kita bisa menggunakan try catch statement untuk menangkap error
    - pada block try, kita akan mencoba mengakses kode program yang bisa menyebabkan error, dan jika terjadi error
      block try akan berhenti dan otomatis masuk ke block catch
    - jika tidak terjadi error, block catch  tidak akan dieksekusi
  
  > Kata Kunci finally
    - dalam try catch kita bisa menambahkan block finally
    - block finally ini akan selalu dieksekusi setelah try catch selesai, entah terjadi error atau tidak (selalu dieksekusi) 
    
  > try Finnaly 
    - kata kunci Finally juga bisa digunakan tanpa perlu menggunakan catch
    - Biasanya ini digunakan dalam kasus tertentu

___________ 
Class Error
  > Membuat Class Error Manual
    - untuk membuat error sendiri secara manual sangatlah mudah, cukup membuat class turunan class Error
    - dan jangan lupa tambahkan parameter message, agar bisa dikirimkan ke parameter di constructor class Error